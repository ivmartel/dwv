{"version":3,"file":"jpegbaseline.worker.min.js","mappings":"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","sources":["webpack://dwv/./src/decoders/pdfjs/jpg.js","webpack://dwv/./src/decoders/pdfjs/jpegbaseline.worker.js"],"sourcesContent":["/* eslint-disable */\n\n/**\n * Modified for dwv:\n * - export root var,\n * - remove old style import/export and\n *   related (for ex 'use strict').\n */\n\n/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\nThis code was forked from https://github.com/notmasteryet/jpgjs. The original\nversion was created by github user notmasteryet\n\n- The JPEG specification can be found in the ITU CCITT Recommendation T.81\n (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n- The JFIF specification can be found in the JPEG File Interchange Format\n (www.w3.org/Graphics/JPEG/jfif3.pdf)\n- The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n in PostScript Level 2, Technical Note #5116\n (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n*/\n\nexport var JpegImage = (function jpegImage() {\n  var dctZigZag = new Uint8Array([\n     0,\n     1,  8,\n    16,  9,  2,\n     3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n     5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13,  6,\n     7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1  =  4017;   // cos(pi/16)\n  var dctSin1  =   799;   // sin(pi/16)\n  var dctCos3  =  3406;   // cos(3*pi/16)\n  var dctSin3  =  2276;   // sin(3*pi/16)\n  var dctCos6  =  1567;   // cos(6*pi/16)\n  var dctSin6  =  3784;   // sin(6*pi/16)\n  var dctSqrt2 =  5793;   // sqrt(2)\n  var dctSqrt1d2 = 2896;  // sqrt(2) / 2\n\n  var tMin = -2056;\n  var tMax = 2024;\n  var t8bitMax = 255;\n\n  function constructor() {\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n    code.push({children: [], index: 0});\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push(q = {children: [], index: 0});\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push(q = {children: [], index: 0});\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset, frame, components, resetInterval,\n                      spectralStart, spectralEnd, successivePrev, successive) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData === 0xFF) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          throw 'unexpected marker: ' +\n            ((bitsData << 8) | nextByte).toString(16);\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n      while (true) {\n        node = node[readBit()];\n        if (typeof node === 'number') {\n          return node;\n        }\n        if (typeof node !== 'object') {\n          throw 'invalid huffman sequence';\n        }\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        n = (n << 1) | readBit();\n        length--;\n      }\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n      var n = receive(length);\n      if (n >= 1 << (length - 1)) {\n        return n;\n      }\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[offset] = (component.pred += diff);\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n      component.blockData[offset] = (component.pred += diff);\n    }\n\n    function decodeDCSuccessive(component, offset) {\n      component.blockData[offset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n    function decodeACFirst(component, offset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart, e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] =\n          receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, offset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n      while (k <= e) {\n        var z = dctZigZag[k];\n        switch (successiveACState) {\n        case 0: // initial state\n          rs = decodeHuffman(component.huffmanTableAC);\n          s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw 'invalid ACn encoding';\n            }\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue;\n        case 1: // skipping r zero items\n        case 2:\n          if (component.blockData[offset + z]) {\n            component.blockData[offset + z] += (readBit() << successive);\n          } else {\n            r--;\n            if (r === 0) {\n              successiveACState = successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        case 3: // set value for a zero item\n          if (component.blockData[offset + z]) {\n            component.blockData[offset + z] += (readBit() << successive);\n          } else {\n            component.blockData[offset + z] =\n              successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (component.blockData[offset + z]) {\n            component.blockData[offset + z] += (readBit() << successive);\n          }\n          break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      var blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      var blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) {\n      resetInterval = mcuExpected;\n    }\n\n    var h, v;\n    while (mcu < mcuExpected) {\n      // reset interval stuff\n      for (i = 0; i < componentsLength; i++) {\n        components[i].pred = 0;\n      }\n      eobrun = 0;\n\n      if (componentsLength === 1) {\n        component = components[0];\n        for (n = 0; n < resetInterval; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < resetInterval; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n        }\n      }\n\n      // find marker\n      bitsCount = 0;\n      marker = (data[offset] << 8) | data[offset + 1];\n      if (marker <= 0xFF00) {\n        throw 'marker was not found';\n      }\n\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  // A port of poppler's IDCT method which in turn is taken from:\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n  //   988-991.\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable, blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    // inverse DCT on rows\n    for (var row = 0; row < 64; row += 8) {\n      // gather block data\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n\n      // dequant p0\n      p0 *= qt[row];\n\n      // check for all-zero AC coefficients\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = (dctSqrt2 * p0 + 512) >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n      // dequant p1 ... p7\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n\n      // stage 4\n      v0 = (dctSqrt2 * p0 + 128) >> 8;\n      v1 = (dctSqrt2 * p4 + 128) >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;\n      v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n\n      // stage 3\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = v0 - v1;\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n      v3 = t;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = v4 - v6;\n      v7 = (v7 + v5 + 1) >> 1;\n      v5 = v7 - v5;\n\n      // stage 2\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = v0 - v3;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = v1 - v2;\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col +  8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      // check for all-zero AC coefficients\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = (dctSqrt2 * p0 + 8192) >> 14;\n        // convert to 8 bit\n        //t = (t < -2040) ? 0 : (t >= 2024) ? 255 : (t + 2056) >> 4;\n        //t = (t <= -2056 / component.bitConversion) ? 0 : (t >= 2024 / component.bitConversion) ? 255 / component.bitConversion : (t + 2056 / component.bitConversion) >> 4;\n        t = (t <= tMin) ? 0 : (t >= tMax) ? t8bitMax : (t - tMin) >> 4;\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col +  8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      // stage 4\n      v0 = (dctSqrt2 * p0 + 2048) >> 12;\n      v1 = (dctSqrt2 * p4 + 2048) >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;\n      v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;\n      v5 = p3;\n      v6 = p5;\n\n      // stage 3\n      // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when\n      // converting to UInt8 range later.\n      //v0 = ((v0 + v1 + 1) >> 1) + 4112;\n      v0 = ((v0 + v1 + 1) >> 1);\n      v1 = v0 - v1;\n      t  = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n      v3 = t;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = v4 - v6;\n      v7 = (v7 + v5 + 1) >> 1;\n      v5 = v7 - v5;\n\n      // stage 2\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = v0 - v3;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = v1 - v2;\n      t  = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t  = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      // convert to 8-bit integers\n      //p0 = (p0 < 16) ? 0 : (p0 >= 4080) ? 255 : p0 >> 4;\n      p0 = (p0 <= tMin) ? 0 : (p0 >= tMax) ? t8bitMax : (p0 - tMin) >> 4;\n      p1 = (p1 <= tMin) ? 0 : (p1 >= tMax) ? t8bitMax : (p1 - tMin) >> 4;\n      p2 = (p2 <= tMin) ? 0 : (p2 >= tMax) ? t8bitMax : (p2 - tMin) >> 4;\n      p3 = (p3 <= tMin) ? 0 : (p3 >= tMax) ? t8bitMax : (p3 - tMin) >> 4;\n      p4 = (p4 <= tMin) ? 0 : (p4 >= tMax) ? t8bitMax : (p4 - tMin) >> 4;\n      p5 = (p5 <= tMin) ? 0 : (p5 >= tMax) ? t8bitMax : (p5 - tMin) >> 4;\n      p6 = (p6 <= tMin) ? 0 : (p6 >= tMax) ? t8bitMax : (p6 - tMin) >> 4;\n      p7 = (p7 <= tMin) ? 0 : (p7 >= tMax) ? t8bitMax : (p7 - tMin) >> 4;\n\n      // store block data\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col +  8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    //var computationBuffer = new Int16Array(64);\n    var computationBuffer = new Int32Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n    return component.blockData;\n  }\n\n  function clamp0to255(a) {\n    return a <= 0 ? 0 : a >= 255 ? 255 : a;\n  }\n\n  constructor.prototype = {\n    parse: function parse(data) {\n\n      function readUint16() {\n        var value = (data[offset] << 8) | data[offset + 1];\n        offset += 2;\n        return value;\n      }\n\n      function readDataBlock() {\n        var length = readUint16();\n        var array = data.subarray(offset, offset + length - 2);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) *\n                                        component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) *\n                                          component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n\n          var blocksBufferSize = 64 * blocksPerColumnForMcu *\n                                      (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      var quantizationTables = [];\n      var huffmanTablesAC = [], huffmanTablesDC = [];\n      var fileMarker = readUint16();\n      if (fileMarker !== 0xFFD8) { // SOI (Start of Image)\n        throw 'SOI not found';\n      }\n\n      fileMarker = readUint16();\n      while (fileMarker !== 0xFFD9) { // EOI (End of image)\n        var i, j, l;\n        switch(fileMarker) {\n          case 0xFFE0: // APP0 (Application Specific)\n          case 0xFFE1: // APP1\n          case 0xFFE2: // APP2\n          case 0xFFE3: // APP3\n          case 0xFFE4: // APP4\n          case 0xFFE5: // APP5\n          case 0xFFE6: // APP6\n          case 0xFFE7: // APP7\n          case 0xFFE8: // APP8\n          case 0xFFE9: // APP9\n          case 0xFFEA: // APP10\n          case 0xFFEB: // APP11\n          case 0xFFEC: // APP12\n          case 0xFFED: // APP13\n          case 0xFFEE: // APP14\n          case 0xFFEF: // APP15\n          case 0xFFFE: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xFFE0) {\n              if (appData[0] === 0x4A && appData[1] === 0x46 &&\n                  appData[2] === 0x49 && appData[3] === 0x46 &&\n                  appData[4] === 0) { // 'JFIF\\x00'\n                jfif = {\n                  version: { major: appData[5], minor: appData[6] },\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 +\n                                              3 * appData[12] * appData[13])\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xFFEE) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 &&\n                  appData[2] === 0x6F && appData[3] === 0x62 &&\n                  appData[4] === 0x65) { // 'Adobe'\n                adobe = {\n                  version: (appData[5] << 8) | appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n            break;\n\n          case 0xFFDB: // DQT (Define Quantization Tables)\n            var quantizationTablesLength = readUint16();\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = readUint16();\n                }\n              } else {\n                throw 'DQT: invalid table spec';\n              }\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n            if (frame) {\n              throw 'Only single frame JPEGs supported';\n            }\n            readUint16(); // skip data length\n            frame = {};\n            frame.extended = (fileMarker === 0xFFC1);\n            frame.progressive = (fileMarker === 0xFFC2);\n            frame.precision = data[offset++];\n            var frameBitConversion = 255 / ( (1<<frame.precision) - 1 );\n            tMin /= frameBitConversion;\n            tMax /= frameBitConversion;\n            t8bitMax /= frameBitConversion;\n            frame.scanLines = readUint16();\n            frame.samplesPerLine = readUint16();\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++], componentId;\n            var maxH = 0, maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              if (maxH < h) {\n                maxH = h;\n              }\n              if (maxV < v) {\n                maxV = v;\n              }\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h: h,\n                v: v,\n                quantizationTable: quantizationTables[qId],\n                quantizationTableId: qId\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xFFC4: // DHT (Define Huffman Tables)\n            var huffmanLength = readUint16();\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += (codeLengths[j] = data[offset]);\n              }\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n              i += 17 + codeLengthSum;\n\n              ((huffmanTableSpec >> 4) === 0 ?\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xFFDD: // DRI (Define Restart Interval)\n            readUint16(); // skip data length\n            resetInterval = readUint16();\n            break;\n\n          case 0xFFDA: // SOS (Start of Scan)\n            var scanLength = readUint16();\n            var selectorsCount = data[offset++];\n            var components = [], component;\n            for (i = 0; i < selectorsCount; i++) {\n              var componentIndex = frame.componentIds[data[offset++]];\n              component = frame.components[componentIndex];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            var processed = decodeScan(data, offset,\n              frame, components, resetInterval,\n              spectralStart, spectralEnd,\n              successiveApproximation >> 4, successiveApproximation & 15);\n            offset += processed;\n            break;\n\n          case 0xFFFF: // Fill bytes\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n              offset--;\n            }\n            break;\n\n          default:\n            if (data[offset - 3] === 0xFF &&\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n              // could be incorrect encoding -- last 0xFF byte of the previous\n              // block was eaten by the encoder\n              offset -= 3;\n              break;\n            }\n            throw 'unknown JPEG marker ' + fileMarker.toString(16);\n        }\n        fileMarker = readUint16();\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n        if ( ! component.quantizationTable && component.quantizationTableId != null )\n            component.quantizationTable = quantizationTables[component.quantizationTableId];\n        this.components.push({\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn\n        });\n      }\n      this.numComponents = this.components.length;\n    },\n\n    _getLinearizedBlockData: function getLinearizedBlockData(width, height) {\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      //var data = new Uint8Array(dataLength);\n      var data = new Uint16Array(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8; // used to clear the 3 LSBs\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = (component.blocksPerLine + 1) << 3;\n        // precalculate the xScaleBlockOffset\n        for (x = 0; x < width; x++) {\n          j = 0 | (x * componentScaleX);\n          xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);\n        }\n        // linearize the blocks of the component\n        for (y = 0; y < height; y++) {\n          j = 0 | (y * componentScaleY);\n          index = blocksPerScanline * (j & mask3LSB) | ((j & 7) << 3);\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      // decodeTransform contains pairs of multiplier (-256..256) and additive\n      var transform = this.decodeTransform;\n      if (transform) {\n        for (i = 0; i < dataLength;) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];\n          }\n        }\n      }\n      return data;\n    },\n\n    _isColorConversionNeeded: function isColorConversionNeeded() {\n      if (this.adobe && this.adobe.transformCode) {\n        // The adobe transform marker overrides any previous setting\n        return true;\n      } else if (this.numComponents === 3) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y  = data[i    ];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i    ] = clamp0to255(Y - 179.456 + 1.402 * Cr);\n        data[i + 1] = clamp0to255(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n        data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);\n      }\n      return data;\n    },\n\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y  = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n\n        var r = -122.67195406894 +\n          Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr -\n                5.4080610064599e-5 * Y + 0.00048449797120281 * k -\n                0.154362151871126) +\n          Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y -\n                0.00477271405408747 * k + 1.53380253221734) +\n          Y * (0.000961250184130688 * Y - 0.00266257332283933 * k +\n               0.48357088451265) +\n          k * (-0.000336197177618394 * k + 0.484791561490776);\n\n        var g = 107.268039397724 +\n          Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr +\n                0.000659397001245577 * Y + 0.000426105652938837 * k -\n                0.176491792462875) +\n          Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y +\n                0.000770482631801132 * k - 0.151051492775562) +\n          Y * (0.00126935368114843 * Y - 0.00265090189010898 * k +\n               0.25802910206845) +\n          k * (-0.000318913117588328 * k - 0.213742400323665);\n\n        var b = -20.810012546947 +\n          Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr +\n                0.0020741088115012 * Y - 0.00288260236853442 * k +\n                0.814272968359295) +\n          Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y +\n                0.000560833691242812 * k - 0.195152027534049) +\n          Y * (0.00174418132927582 * Y - 0.00255243321439347 * k +\n               0.116935020465145) +\n          k * (-0.000343531996510555 * k + 0.24165260232407);\n\n        data[offset++] = clamp0to255(r);\n        data[offset++] = clamp0to255(g);\n        data[offset++] = clamp0to255(b);\n      }\n      return data;\n    },\n\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y  = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i    ] = clamp0to255(434.456 - Y - 1.402 * Cr);\n        data[i + 1] = clamp0to255(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n        data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);\n        // K in data[i + 3] is unchanged\n      }\n      return data;\n    },\n\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n      var min = -255 * 255 * 255;\n      var scale = 1 / 255 / 255;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n\n        var r =\n          c * (-4.387332384609988 * c + 54.48615194189176 * m +\n               18.82290502165302 * y + 212.25662451639585 * k -\n               72734.4411664936) +\n          m * (1.7149763477362134 * m - 5.6096736904047315 * y -\n               17.873870861415444 * k - 1401.7366389350734) +\n          y * (-2.5217340131683033 * y - 21.248923337353073 * k +\n               4465.541406466231) -\n          k * (21.86122147463605 * k + 48317.86113160301);\n        var g =\n          c * (8.841041422036149 * c + 60.118027045597366 * m +\n               6.871425592049007 * y + 31.159100130055922 * k -\n               20220.756542821975) +\n          m * (-15.310361306967817 * m + 17.575251261109482 * y +\n               131.35250912493976 * k - 48691.05921601825) +\n          y * (4.444339102852739 * y + 9.8632861493405 * k -\n               6341.191035517494) -\n          k * (20.737325471181034 * k + 47890.15695978492);\n        var b =\n          c * (0.8842522430003296 * c + 8.078677503112928 * m +\n               30.89978309703729 * y - 0.23883238689178934 * k -\n               3616.812083916688) +\n          m * (10.49593273432072 * m + 63.02378494754052 * y +\n               50.606957656360734 * k - 28620.90484698408) +\n          y * (0.03296041114873217 * y + 115.60384449646641 * k -\n               49363.43385999684) -\n          k * (22.33816807309886 * k + 45932.16563550634);\n\n        data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;\n        data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;\n        data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;\n      }\n      return data;\n    },\n\n    getData: function getData(width, height, forceRGBoutput) {\n      if (this.numComponents > 4) {\n        throw 'Unsupported color mode';\n      }\n      // type of data: Uint8Array(width * height * numComponents)\n      var data = this._getLinearizedBlockData(width, height);\n\n      if (this.numComponents === 1 && forceRGBoutput) {\n        var dataLength = data.length;\n        //var rgbData = new Uint8Array(dataLength * 3);\n        var rgbData = new Uint16Array(dataLength * 3);\n        var offset = 0;\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n        return rgbData;\n      } else if (this.numComponents === 3) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded()) {\n          if (forceRGBoutput) {\n            return this._convertYcckToRgb(data);\n          } else {\n            return this._convertYcckToCmyk(data);\n          }\n        } else if (forceRGBoutput) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n      return data;\n    }\n  };\n\n  return constructor;\n})();\n","/**\n * JPEG Baseline decoder worker.\n */\n\nimport {JpegImage} from './jpg.js';\n\nself.addEventListener('message', function (event) {\n\n  // decode DICOM buffer\n  const decoder = new JpegImage();\n  decoder.parse(event.data.buffer);\n  // post decoded data\n  const res = decoder.getData(decoder.width, decoder.height);\n  self.postMessage([res]);\n\n}, false);\n"],"names":["JpegImage","dctZigZag","Uint8Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","tMin","tMax","t8bitMax","constructor","buildHuffmanTable","codeLengths","values","i","j","k","code","length","push","children","index","q","p","pop","getBlockBufferOffset","component","row","col","blocksPerLine","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","mcusPerLine","progressive","startOffset","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","node","receive","n","receiveAndExtend","successiveACNextValue","eobrun","successiveACState","decodeMcu","decode","mcu","mcuCol","v","h","decodeBlock","decodeFn","componentsLength","t","huffmanTableDC","diff","blockData","pred","e","rs","huffmanTableAC","s","r","z","marker","mcuExpected","blocksPerColumn","mcusPerColumn","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","p0","p1","p2","p3","p4","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int32Array","blockRow","blockCol","clamp0to255","a","prototype","parse","readUint16","value","prepareComponents","Math","ceil","samplesPerLine","maxH","scanLines","maxV","blocksPerLineForMcu","blocksBufferSize","Int16Array","array","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","l","appData","subarray","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","Uint16Array","extended","precision","frameBitConversion","componentIds","componentId","componentsCount","qId","quantizationTableId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","this","width","height","output","scaleX","scaleY","numComponents","_getLinearizedBlockData","componentScaleX","componentScaleY","blocksPerScanline","x","y","dataLength","xScaleBlockOffset","Uint32Array","mask3LSB","transform","decodeTransform","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","g","b","_convertYcckToCmyk","_convertCmykToRgb","c","m","min","scale","getData","forceRGBoutput","rgbData","grayColor","self","addEventListener","event","decoder","buffer","res","postMessage"],"sourceRoot":""}